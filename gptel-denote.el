;;; gptel-denote.el --- Convert a GPTel chat buffer to a Denote file  -*- lexical-binding: t; -*-

;; Copyright (C) 2025  Peter Prevos

;; Author: Peter Prevos <peter@prevos.net>
;; Keywords: text, convenience

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Convenience function to convert a GPTel chat buffer to a Denote file.
;; Title and keywords are generated by the active Large Langage Model.
;; The `gptel-denote-keyword' is appeneded to the generated keywords to identify
;; LLM-genertaed content.

;;; Code:
(require 'denote)
(require 'gptel)

(defgroup gptel-denote ()
  "Convert a GPTel chat buffer to a Denote file."
  :group 'files
  :link  '(url-link :tag "Homepage" "https://github.com/pprevos/gptel-denote/"))

(defcustom gptel-denote-keyword "llm"
  "Standard keyword to identify notes generated by an LLM.
Set this variable to nil to exlucde this keyword."
  :group 'gptel-denote
  :type 'string)

(defvar gptel-denote-response nil
  "Dummy variable to store LLM-generated content.")

(defun gptel-denote--store-response (prompt)
  "Store the response of PROMPT in `gptel-denote-response'."
  ;; Based on code by Omar Antol√≠n (@oantolin@mathstodon.xyz)
  (gptel-request prompt
    :transforms '(gptel--transform-add-context)
    :callback
    (lambda (response info)
      (if (null response)
          (message "gptel failed with status %s and error message:\n%S"
                   (plist-get info :status)
                   (plist-get (plist-get info :error) :message))
	(setq gptel-denote-response response)))))

(defun gptel-denote--generate-title (text)
  "Generate a Denote title based on the TEXT."
  (let* ((prompt (concat "Generate a one-line title for this note\n"
			 "(don't use quotation marks):\n"
			 text)))
    (gptel-denote--store-response prompt)
    gptel-denote-response))

(defun gptel-denote--generate-keywords (text)
  "Generate relevant keywords for TEXT."
  (let* ((all-keywords (denote-keywords))
	 (prompt (concat "Select keywords that best describe this text:\n"
			 text
			 "Select three from these possible keywords\n"
			 "Only select three from this list, no other keywords allowed"
			 (mapconcat 'identity all-keywords ", ")
			 "Provide the output strictly as follows (no other text):\n"
			 "<keyword1> <keyword2> <keyword3>")))
    (gptel-denote--store-response prompt)
    (split-string gptel-denote-response " ")))

(defun gptel-denote ()
  "Save GPTel chat session as a Denote file in `denote-directory'."
  (interactive)
  (let* ((content (buffer-substring-no-properties (point-min) (point-max)))
	 (title (gptel-denote--generate-title content))
	 (llm-keywords (gptel-denote--generate-keywords content))
	 (keywords (append llm-keywords (list gptel-denote-keyword)))
	 (date (current-time))
	 (id (denote-get-identifier date))
	 (front-matter (denote--format-front-matter title date keywords id "" 'org))
	 (file (denote-format-file-name denote-directory id keywords title ".org" "")))
    (beginning-of-buffer)
    (insert front-matter)
    (write-file file)))

(provide 'gptel-denote)
;;; gptel-denote.el ends here
